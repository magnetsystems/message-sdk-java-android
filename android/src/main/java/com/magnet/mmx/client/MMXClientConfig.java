/*   Copyright (c) 2015 Magnet Systems, Inc.
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */
package com.magnet.mmx.client;

/**
 * To use MMX, the application should implement
 * this class and use it when calling MMXClient.connect().
 *
 */
public interface MMXClientConfig {
  /**
   * The Application ID that is generated by the
   * Magnet developer portal for this application.
   * @return the appId for this application (provided by MMX)
   */
  public String getAppId();

  /**
   * The API Key that is generated by the
   * Magnet developer portal for this application.
   * @return the API key for this application (provided by MMX)
   */
  public String getApiKey();

  /**
   * The GCM Project ID that is generated by the
   * Google's GCM Registration site for this application.
   * @return the GCM sender id (project id) for this application (provided by Google)
   */
  public String getGcmSenderId();

  /**
   * If this application has a appserver component, the appserver
   * will be a user of MMX as well. This should return the appserver's
   * "user" for MMX.
   * @return the "server" user if it exists.  This can return null of server does not have a user.
   */
  public String getServerUser();

  /**
   * If the application wishes to support "guest" login (login without a user)
   * this should return the pre-configured anonymous secret.
   * @return The anonymous secret for this application (provided by MMX)
   */
  public String getAnonymousSecret();

  /**
   * The host to which this MMXClient will connect.
   *
   * @return a host name (without protocol or port).  null if not specified
   */
  public String getHost();

  /**
   * The port to which this MMXClient will connect.
   *
   * @return the port number to connect to.  -1 if not specified
   */
  public int getPort();

  /**
   * The port for the MMX REST APIs
   *
   * @return the port number for the REST APIs, -1 if not specified
   */
  public int getRESTPort();

  /**
   * The MMX domain name with which the connection will be made.
   *
   * @return the domain name
   */
  public String getDomainName();

  /**
   * The security level to enforce for this connection.  For production systems,
   * this should AT LEAST be SecurityLevel.RELAXED if not SecurityLevel.STRICT
   *
   * @return the security level to enforce for this connection
   */
  public MMXClient.SecurityLevel getSecurityLevel();
  
  /**
   * The raw device ID to be used by the client.  This raw device ID will be
   * scrambled before used as a unique ID for the endpoint.
   * 
   * @return the device ID
   */
  public String getDeviceId();
}
